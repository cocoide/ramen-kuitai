// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name       String?
  bio    String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role              Role @default(USER)
  accounts      Account[]
  sessions      Session[]
  postedReviews Review[]
  bookmarkedShops RamenShop[]
}

model Review {
  id         String            @id @default(cuid())
  title      String            
  image  String?
  content   String?
  rating     Int?
  authorId String?
  author  User? @relation(fields: [authorId], references: [email])
  shopId String?
  shop RamenShop? @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
}

model RamenShop {
  id String  @id @default(cuid())
  name String @unique
  image  String?
  address String[]
  reviews Review[]
  bookmarkedBy User[]
  category Category[]
  rating Int?
}

model Category{
  id String @id @default(cuid())
  name String @unique
  shops RamenShop[]
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  @@unique([provider, providerAccountId])
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}